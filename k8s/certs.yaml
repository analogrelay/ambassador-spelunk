---
apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    email: andrew@stanton-nurse.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-prod
    http01:
      serviceType: ClusterIP
    solvers:
      - http01:
          ingress:
            class: nginx
        selector: {}
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: ambassador-certs
  # cert-manager will put the resulting Secret in the same Kubernetes namespace
  # as the Certificate. Therefore you should put this Certificate in the same namespace as Ambassador.
  # eg. if you deploy ambassador to ambassador namespace, you need to change to namespace: ambassador
  namespace: default
spec:
  # naming the secret name certificate ambassador-certs is important because
  # ambassador just look for this particular name
  secretName: ambassador-certs
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
    - anurse-k8s-ambassador.westus2.cloudapp.azure.com
    - k8s.httpcontext.dev
  acme:
    config:
      - http01:
          ingressClass: nginx
        domains:
          - anurse-k8s-ambassador.westus2.cloudapp.azure.com
          - k8s.httpcontext.dev
---
apiVersion: getambassador.io/v1
kind: Mapping
metadata:
  name: acme-challenge-mapping
spec:
  prefix: /.well-known/acme-challenge
  rewrite: ""
  service: acme-challenge-service
---
apiVersion: v1
kind: Service
metadata:
  name: acme-challenge-service
spec:
  ports:
    - port: 80
      targetPort: 8089
  selector:
    acme.cert-manager.io/http01-solver: "true"
